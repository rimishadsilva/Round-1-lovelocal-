EASY 1:
package com.mycompany.mavenproject14;
import java.util.*;
/**
 *
 * @author hp
 */
public class Mavenproject14 {




    public static int lengthLastWord(String s) {
        // Split the string into words
        String[] wrds = s.split("\\s+");

        // Check if there are any words in the string
        if (wrds.length == 0) {
            return 0;
        }

        // Return the length of the last word
        return wrds[wrds.length - 1].length();
    }

    public static void main(String[] args) {
        // Create a Scanner object to take input from the user
        Scanner scanner = new Scanner(System.in);

        // Prompt the user to enter a string
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();

        // Call the lengthOfLastWord method and print the result
        int res = lengthLastWord(input);
        System.out.println("Length of the last word: " + res);

        // Close the scanner
        scanner.close();
    }
}
/*1.String Splitting:
The method takes a string s as input.
It uses the split("\\s+") method to split the string into an array of words (wrds). The regular expression "\\s+" indicates one or more whitespace characters as the delimiter.

2.Checking for Words:
It checks if there are any words in the string by examining the length of the wrds array. If the array is empty, it means there are no words, and the method returns 0.

3.Returning Length of Last Word:
If there are words in the array, the method returns the length of the last word. It retrieves the last element of the array (wrds[wrds.length - 1]) and calculates its length using .length().

Reasoning:
The purpose of the code is to find and print the length of the last word in a given string. It achieves this by splitting the string into words and extracting the length of the last word.

The regular expression \\s+ is used to handle cases where there might be multiple spaces between words. The check for the presence of words ensures that the method doesn't attempt to access an invalid index in the array.

The Scanner is used to interactively take input from the user. The provided logic is concise and effective for solving the specified problem.*/

MEDIUM 2:
package com.mycompany.majorelement;
import java.util.*;

public class Majorelement {

    // Function to find elements appearing more than ⌊ n/3 ⌋ times in an array
    public static List<Integer> majorElement(int[] nums) {
        List<Integer> result = new ArrayList<>();
        int c1 = 0, c2 = 0, count1 = 0, count2 = 0;

        // Voting process to find potential candidates
        for (int num : nums) {
            if (num == c1) count1++;
            else if (num == c2) count2++;
            else if (count1 == 0) { c1 = num; count1 = 1; }
            else if (count2 == 0) { c2 = num; count2 = 1; }
            else { count1--; count2--; }
        }

        // Reset counts for the second pass
        count1 = count2 = 0;

        // Second pass to count occurrences of potential candidates
        for (int num : nums) {
            if (num == c1) count1++;
            else if (num == c2) count2++;
        }

        // Check if candidates appear more than ⌊ n/3 ⌋ times
        if (count1 > nums.length / 3) result.add(c1);
        if (count2 > nums.length / 3) result.add(c2);

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Prompt the user to enter the array elements
        System.out.print("Enter the array elements (separate by space): ");
        int[] nums = Arrays.stream(scanner.nextLine().split("\\s+"))
                          .mapToInt(Integer::parseInt)
                          .toArray();

        // Call the majorElement method and print the result
        System.out.println("Elements appearing more than ⌊ n/3 ⌋ times: " + majorElement(nums));

        // Close the scanner
        scanner.close();
    }
}
/*
1.Initialization:
Two potential candidates (c1 and c2) are initialized to 0.
Counters (count1 and count2) for the candidates are initialized to 0.

2.Voting Process (First Pass):
The code iterates through the array (nums).
If the current number matches c1 or c2, the respective counter is incremented.
If both counters are 0, the current number becomes a candidate, and the counter is set to 1.
If both counters are non-zero, both counters are decremented (voting out candidates).

3.Second Pass:
The code resets counters and iterates through the array again.
Counts occurrences of potential candidates (c1 and c2).

4.Checking Candidates:
If the count of c1 is greater than [ n/3 ], add c1 to the result.
If the count of c2 is greater than [ n/3 ], add c2 to the result.

5.Result:
The function returns the result, which contains elements appearing more than ⌊ n/3 ⌋ times.

Reasoning:
The algorithm uses the Boyer-Moore Majority Vote algorithm to find potential candidates in a concise and efficient way. The key idea is to vote out pairs of different elements, leaving potential candidates that might appear more than ⌊ n/3 ⌋ times.

The two-pass approach ensures the correctness of the counts for potential candidates. The final result is determined based on the counts of potential candidates.

Overall, the algorithm reduces the problem to finding at most two potential candidates efficiently, resulting in a linear time complexity solution.
*/

HARD 2:
package com.mycompany.shortpalindrome;
import java.util.*;
/**
 *
 * @author hp
 */
public class Shortpalindrome {



    public static String shortestpalindrome(String s) {
        int i = 0, j = s.length() - 1;

        while (j >= 0) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
            }
            j--;
        }

        if (i == s.length()) {
            return s;  // The string is already a palindrome
        }

        String suffix = s.substring(i);
        String prefix = new StringBuilder(suffix).reverse().toString();

        return prefix + shortestpalindrome(s.substring(0, i)) + suffix;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a string: ");
        String inputString = scanner.nextLine();

        System.out.println("Shortest palindrome: " + shortestpalindrome(inputString));

        scanner.close();
    }
}
/*
1.Initialization:

i and j are initialized to the start and end of the string, respectively.
2.Finding the Common Suffix:

The while loop is used to find the common suffix of the string. It increments i if characters at positions i and j are equal, moving towards the center of the string.
3.Handling Already Palindrome Case:

If i reaches the end of the string, it means the entire string is a palindrome. In this case, the original string is returned as the result.
4.Creating Suffix and Prefix:

The suffix is obtained from the remaining part of the string starting from position i.
The prefix is created by reversing the suffix.
5.Recursive Call:

The function is called recursively on the substring from the beginning of the string to position i.
6.Concatenation:

The final result is obtained by concatenating the prefix, the recursive result, and the suffix.
*/
